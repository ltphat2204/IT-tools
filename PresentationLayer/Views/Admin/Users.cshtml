@model PresentationLayer.Models.User.UserListViewModel
@using Microsoft.AspNetCore.Identity
@using BusinessLayer.Entities
@inject UserManager<ApplicationUser> UserManager

@{
    ViewData["Title"] = "Users";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

<div class="container mt-5">
    <form method="get" class="d-flex gap-2">
        <input class="form-control w-50" type="text" name="search" value="@Model.SearchQuery" placeholder="Search by name or email" />
        <select name="roleFilter" class="form-select w-25">
            @if (@Model.RoleFilter == "All")
            {
                <option value="All" selected>All Roles</option>
            }
            else
            {
                <option value="All">All Roles</option>
            }
            @if (@Model.RoleFilter == "User")
            {
                <option value="User" selected>User</option>
            }
            else
            {
                <option value="User">User</option>
            }
            @if (@Model.RoleFilter == "Admin")
            {
                <option value="Admin" selected>Admin</option>
            }
            else
            {
                <option value="Admin">Admin</option>
            }
        </select>
        <button type="submit" class="btn btn-primary">Search</button>
    </form>

    <table class="table table-bordered table-striped mt-3">
        <thead>
            <tr>
                <th>User ID</th>
                <th>Name</th>
                <th>Email</th>
                <th>Role</th>
                <th>Actions</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var user in Model.Users)
            {
                var roles = await @UserManager.GetRolesAsync(user);
                var role = roles[0];
                <tr>
                    <td>@user.Id</td>
                    <td>@user.Name</td>
                    <td>@user.Email</td>
                    <td>@role</td>
                    <td>
                        @if (role == "Premium")
                        {
                            <form method="post" action="@Url.Action("ChangeRole", "Admin")" style="display:inline;">
                                <input type="hidden" name="userId" value="@user.Id" />
                                <input type="hidden" name="newRole" value="User" />
                                <button type="submit" class="btn btn-primary">Downgrade to User</button>
                            </form>
                        }
                        @if (role == "User")
                        {
                            <form method="post" action="@Url.Action("ChangeRole", "Admin")" style="display:inline;">
                                <input type="hidden" name="userId" value="@user.Id" />
                                <input type="hidden" name="newRole" value="Premium" />
                                <button type="submit" class="btn btn-success">Upgrade to Premium</button>
                            </form>
                        }
                    </td>
                </tr>
            }
        </tbody>
    </table>

    <nav class="d-flex justify-content-center">
        <ul class="pagination">
            @if (Model.CurrentPage > 1)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Users", "Admin", new { page = Model.CurrentPage - 1, search = Model.SearchQuery, roleFilter = Model.RoleFilter })" aria-label="Previous">
                        <span aria-hidden="true">&lt;</span>
                    </a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link" aria-hidden="true">&lt;</span>
                </li>
            }
            @for (var i = 1; i <= Model.TotalPages; i++)
            {
                <li class="page-item @(Model.CurrentPage == i ? "active" : "")">
                    <a class="page-link" href="@Url.Action("Users", "Admin", new { page = i, search = Model.SearchQuery, roleFilter = Model.RoleFilter })">@i</a>
                </li>
            }
            @if (Model.CurrentPage < Model.TotalPages)
            {
                <li class="page-item">
                    <a class="page-link" href="@Url.Action("Users", "Admin", new { page = Model.CurrentPage + 1, search = Model.SearchQuery, roleFilter = Model.RoleFilter })" aria-label="Next">
                        <span aria-hidden="true">&gt;</span>
                    </a>
                </li>
            }
            else
            {
                <li class="page-item disabled">
                    <span class="page-link" aria-hidden="true">&gt;</span>
                </li>
            }
        </ul>
    </nav>
</div>